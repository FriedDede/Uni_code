;  LST file generated by mikroListExporter - v.2.0 
; Date/Time: 3/30/2022 4:40:52 PM
;----------------------------------------------

;Address Opcode 	ASM
0x0000	0xF000EFAD  	GOTO        346
_interrupt:
;ES2.c,17 :: 		void interrupt()
0x0008	0xF016C000  	MOVFF       R0, 22
0x000C	0xF015C001  	MOVFF       R1, 21
;ES2.c,19 :: 		if (INTCON.RBIF)
0x0010	0xA0F2      	BTFSS       INTCON, 0 
0x0012	0xD03F      	BRA         L_interrupt0
;ES2.c,21 :: 		if (PORTB.RB7){
0x0014	0xAE81      	BTFSS       PORTB, 7 
0x0016	0xD01D      	BRA         L_interrupt1
;ES2.c,22 :: 		delay += ACCURANCY;
0x0018	0x0E32      	MOVLW       50
0x001A	0x2417      	ADDWF       _delay, 0 
0x001C	0x6E01      	MOVWF       R1 
0x001E	0x0E00      	MOVLW       0
0x0020	0x2018      	ADDWFC      _delay+1, 0 
0x0022	0x6E02      	MOVWF       R2 
0x0024	0xF017C001  	MOVFF       R1, _delay
0x0028	0xF018C002  	MOVFF       R2, _delay+1
;ES2.c,23 :: 		delay = (delay > MAX_DELAY) ? MAX_DELAY : delay;
0x002C	0x5002      	MOVF        R2, 0 
0x002E	0x0807      	SUBLW       7
0x0030	0xE102      	BNZ         L__interrupt18
0x0032	0x5001      	MOVF        R1, 0 
0x0034	0x08D0      	SUBLW       208
L__interrupt18:
0x0036	0xE205      	BC          L_interrupt2
0x0038	0x0ED0      	MOVLW       208
0x003A	0x6E1E      	MOVWF       ?FLOC___interruptT4 
0x003C	0x0E07      	MOVLW       7
0x003E	0x6E1F      	MOVWF       ?FLOC___interruptT4+1 
0x0040	0xD004      	BRA         L_interrupt3
L_interrupt2:
0x0042	0xF01EC017  	MOVFF       _delay, ?FLOC___interruptT4
0x0046	0xF01FC018  	MOVFF       _delay+1, ?FLOC___interruptT4+1
L_interrupt3:
0x004A	0xF017C01E  	MOVFF       ?FLOC___interruptT4, _delay
0x004E	0xF018C01F  	MOVFF       ?FLOC___interruptT4+1, _delay+1
;ES2.c,24 :: 		}
L_interrupt1:
;ES2.c,25 :: 		if (PORTB.RB6){
0x0052	0xAC81      	BTFSS       PORTB, 6 
0x0054	0xD01D      	BRA         L_interrupt4
;ES2.c,26 :: 		delay -= ACCURANCY;
0x0056	0x0E32      	MOVLW       50
0x0058	0x5C17      	SUBWF       _delay, 0 
0x005A	0x6E01      	MOVWF       R1 
0x005C	0x0E00      	MOVLW       0
0x005E	0x5818      	SUBWFB      _delay+1, 0 
0x0060	0x6E02      	MOVWF       R2 
0x0062	0xF017C001  	MOVFF       R1, _delay
0x0066	0xF018C002  	MOVFF       R2, _delay+1
;ES2.c,27 :: 		delay = (delay < MIN_DELAY) ? MIN_DELAY : delay;
0x006A	0x0E00      	MOVLW       0
0x006C	0x5C02      	SUBWF       R2, 0 
0x006E	0xE102      	BNZ         L__interrupt19
0x0070	0x0E64      	MOVLW       100
0x0072	0x5C01      	SUBWF       R1, 0 
L__interrupt19:
0x0074	0xE205      	BC          L_interrupt5
0x0076	0x0E64      	MOVLW       100
0x0078	0x6E20      	MOVWF       ?FLOC___interruptT8 
0x007A	0x0E00      	MOVLW       0
0x007C	0x6E21      	MOVWF       ?FLOC___interruptT8+1 
0x007E	0xD004      	BRA         L_interrupt6
L_interrupt5:
0x0080	0xF020C017  	MOVFF       _delay, ?FLOC___interruptT8
0x0084	0xF021C018  	MOVFF       _delay+1, ?FLOC___interruptT8+1
L_interrupt6:
0x0088	0xF017C020  	MOVFF       ?FLOC___interruptT8, _delay
0x008C	0xF018C021  	MOVFF       ?FLOC___interruptT8+1, _delay+1
;ES2.c,28 :: 		}
L_interrupt4:
;ES2.c,30 :: 		INTCON.RBIF = 0;
0x0090	0x90F2      	BCF         INTCON, 0 
;ES2.c,31 :: 		}
L_interrupt0:
;ES2.c,32 :: 		if (INTCON.TMR0IF)
0x0092	0xA4F2      	BTFSS       INTCON, 2 
0x0094	0xD00A      	BRA         L_interrupt7
;ES2.c,34 :: 		timer_add(&timer_time_int,&timer_time_dec);
0x0096	0x0E1B      	MOVLW       _timer_time_int
0x0098	0x6E22      	MOVWF       FARG_timer_add_timer_int 
0x009A	0x0E00      	MOVLW       hi_addr(_timer_time_int)
0x009C	0x6E23      	MOVWF       FARG_timer_add_timer_int+1 
0x009E	0x0E19      	MOVLW       _timer_time_dec
0x00A0	0x6E24      	MOVWF       FARG_timer_add_timer_dec 
0x00A2	0x0E00      	MOVLW       hi_addr(_timer_time_dec)
0x00A4	0x6E25      	MOVWF       FARG_timer_add_timer_dec+1 
0x00A6	0xD806      	RCALL       _timer_add
;ES2.c,36 :: 		INTCON.TMR0IF = 0;
0x00A8	0x94F2      	BCF         INTCON, 2 
;ES2.c,37 :: 		}
L_interrupt7:
;ES2.c,38 :: 		}
L_end_interrupt:
L__interrupt17:
0x00AA	0xF000C016  	MOVFF       22, R0
0x00AE	0xF001C015  	MOVFF       21, R1
0x00B2	0x0011      	RETFIE      1
; end of _interrupt
_timer_add:
;timer.c,3 :: 		void timer_add(unsigned int *timer_int, unsigned int *timer_dec){
;timer.c,4 :: 		*timer_int += T0TIME_int;
0x00B4	0xFFE9C022  	MOVFF       FARG_timer_add_timer_int, FSR0L
0x00B8	0xFFEAC023  	MOVFF       FARG_timer_add_timer_int+1, FSR0H
0x00BC	0x0E20      	MOVLW       32
0x00BE	0x24EE      	ADDWF       POSTINC0, 0 
0x00C0	0x6E00      	MOVWF       R0 
0x00C2	0x0E00      	MOVLW       0
0x00C4	0x20EE      	ADDWFC      POSTINC0, 0 
0x00C6	0x6E01      	MOVWF       R1 
0x00C8	0xFFE1C022  	MOVFF       FARG_timer_add_timer_int, FSR1L
0x00CC	0xFFE2C023  	MOVFF       FARG_timer_add_timer_int+1, FSR1H
0x00D0	0xFFE6C000  	MOVFF       R0, POSTINC1
0x00D4	0xFFE6C001  	MOVFF       R1, POSTINC1
;timer.c,5 :: 		*timer_dec += T0TIME_dec;
0x00D8	0xFFE9C024  	MOVFF       FARG_timer_add_timer_dec, FSR0L
0x00DC	0xFFEAC025  	MOVFF       FARG_timer_add_timer_dec+1, FSR0H
0x00E0	0xFFE1C024  	MOVFF       FARG_timer_add_timer_dec, FSR1L
0x00E4	0xFFE2C025  	MOVFF       FARG_timer_add_timer_dec+1, FSR1H
0x00E8	0x0E00      	MOVLW       0
0x00EA	0x26E6      	ADDWF       POSTINC1, 1 
0x00EC	0x0E03      	MOVLW       3
0x00EE	0x22E6      	ADDWFC      POSTINC1, 1 
;timer.c,6 :: 		if (*timer_dec <= 1000)
0x00F0	0xFFE9C024  	MOVFF       FARG_timer_add_timer_dec, FSR0L
0x00F4	0xFFEAC025  	MOVFF       FARG_timer_add_timer_dec+1, FSR0H
0x00F8	0xF001CFEE  	MOVFF       POSTINC0, R1
0x00FC	0xF002CFEE  	MOVFF       POSTINC0, R2
0x0100	0x5002      	MOVF        R2, 0 
0x0102	0x0803      	SUBLW       3
0x0104	0xE102      	BNZ         L__timer_add2
0x0106	0x5001      	MOVF        R1, 0 
0x0108	0x08E8      	SUBLW       232
L__timer_add2:
0x010A	0xE31E      	BNC         L_timer_add0
;timer.c,8 :: 		*timer_int += 1;
0x010C	0xFFE9C022  	MOVFF       FARG_timer_add_timer_int, FSR0L
0x0110	0xFFEAC023  	MOVFF       FARG_timer_add_timer_int+1, FSR0H
0x0114	0x0E01      	MOVLW       1
0x0116	0x24EE      	ADDWF       POSTINC0, 0 
0x0118	0x6E00      	MOVWF       R0 
0x011A	0x0E00      	MOVLW       0
0x011C	0x20EE      	ADDWFC      POSTINC0, 0 
0x011E	0x6E01      	MOVWF       R1 
0x0120	0xFFE1C022  	MOVFF       FARG_timer_add_timer_int, FSR1L
0x0124	0xFFE2C023  	MOVFF       FARG_timer_add_timer_int+1, FSR1H
0x0128	0xFFE6C000  	MOVFF       R0, POSTINC1
0x012C	0xFFE6C001  	MOVFF       R1, POSTINC1
;timer.c,9 :: 		*timer_dec -= 1000;
0x0130	0xFFE9C024  	MOVFF       FARG_timer_add_timer_dec, FSR0L
0x0134	0xFFEAC025  	MOVFF       FARG_timer_add_timer_dec+1, FSR0H
0x0138	0xFFE1C024  	MOVFF       FARG_timer_add_timer_dec, FSR1L
0x013C	0xFFE2C025  	MOVFF       FARG_timer_add_timer_dec+1, FSR1H
0x0140	0x0EE8      	MOVLW       232
0x0142	0x5EE6      	SUBWF       POSTINC1, 1 
0x0144	0x0E03      	MOVLW       3
0x0146	0x5AE6      	SUBWFB      POSTINC1, 1 
;timer.c,10 :: 		}
L_timer_add0:
;timer.c,11 :: 		}
L_end_timer_add:
0x0148	0x0012      	RETURN      0
; end of _timer_add
___CC2DW:
;__Lib_System.c,21 :: 		
;__Lib_System.c,23 :: 		
_CC2DL_Loop1:
;__Lib_System.c,24 :: 		
0x014A	0x0009      	TBLRD*+
;__Lib_System.c,25 :: 		
0x014C	0xFFE6CFF5  	MOVFF       TABLAT, POSTINC1
;__Lib_System.c,26 :: 		
0x0150	0x0600      	DECF        R0, 1, 0
;__Lib_System.c,27 :: 		
0x0152	0xE1FB      	BNZ         _CC2DL_Loop1
;__Lib_System.c,28 :: 		
0x0154	0x0601      	DECF        R1, 1, 0
;__Lib_System.c,29 :: 		
0x0156	0xE1F9      	BNZ         _CC2DL_Loop1
;__Lib_System.c,31 :: 		
L_end___CC2DW:
0x0158	0x0012      	RETURN      0
; end of ___CC2DW
_main:
0x015A	0x0EF4      	MOVLW       244
0x015C	0x6E17      	MOVWF       _delay 
0x015E	0x0E01      	MOVLW       1
0x0160	0x6E18      	MOVWF       24 
0x0162	0x6A19      	CLRF        _timer_time_dec 
0x0164	0x6A1A      	CLRF        26 
0x0166	0x6A1B      	CLRF        _timer_time_int 
0x0168	0x6A1C      	CLRF        28 
;ES2.c,40 :: 		void main()
;ES2.c,43 :: 		short int up = 1;
0x016A	0x0E01      	MOVLW       1
0x016C	0x6E1D      	MOVWF       main_up_L0 
;ES2.c,45 :: 		TRISD = 0b00000000;
0x016E	0x6A95      	CLRF        TRISD 
;ES2.c,46 :: 		LATD = 0b00000001;
0x0170	0x0E01      	MOVLW       1
0x0172	0x6E8C      	MOVWF       LATD 
;ES2.c,47 :: 		TRISB = 0b11000000;
0x0174	0x0EC0      	MOVLW       192
0x0176	0x6E93      	MOVWF       TRISB 
;ES2.c,48 :: 		ANSELB = 0b00000000;
0x0178	0x010F      	MOVLB       15
0x017A	0x6B39      	CLRF        ANSELB, 1
;ES2.c,49 :: 		T0CON = 0b11000111;
0x017C	0x0EC7      	MOVLW       199
0x017E	0x6ED5      	MOVWF       T0CON 
;ES2.c,55 :: 		IOCB = 0b11000000;
0x0180	0x0EC0      	MOVLW       192
0x0182	0x6E62      	MOVWF       IOCB 
;ES2.c,56 :: 		INTCON.RBIE = 1;
0x0184	0x86F2      	BSF         INTCON, 3 
;ES2.c,57 :: 		INTCON.RBIF = 0;
0x0186	0x90F2      	BCF         INTCON, 0 
;ES2.c,58 :: 		INTCON.TMR0IE = 1;
0x0188	0x8AF2      	BSF         INTCON, 5 
;ES2.c,59 :: 		INTCON.TMR0IF = 0;
0x018A	0x94F2      	BCF         INTCON, 2 
;ES2.c,62 :: 		INTCON.GIE = 1;
0x018C	0x8EF2      	BSF         INTCON, 7 
;ES2.c,65 :: 		while (1)
L_main8:
;ES2.c,67 :: 		if (timer_time_int > delay)
0x018E	0x501C      	MOVF        _timer_time_int+1, 0 
0x0190	0x5C18      	SUBWF       _delay+1, 0 
0x0192	0xE102      	BNZ         L__main21
0x0194	0x501B      	MOVF        _timer_time_int, 0 
0x0196	0x5C17      	SUBWF       _delay, 0 
L__main21:
0x0198	0xE21B      	BC          L_main10
;ES2.c,69 :: 		timer_time_int = 0;
0x019A	0x6A1B      	CLRF        _timer_time_int 
0x019C	0x6A1C      	CLRF        _timer_time_int+1 
;ES2.c,70 :: 		if (LATD == 0b10000000)
0x019E	0x508C      	MOVF        LATD, 0 
0x01A0	0x0A80      	XORLW       128
0x01A2	0xE102      	BNZ         L_main11
;ES2.c,71 :: 		up = 0;
0x01A4	0x6A1D      	CLRF        main_up_L0 
0x01A6	0xD005      	BRA         L_main12
L_main11:
;ES2.c,72 :: 		else if (LATD == 0b00000001)
0x01A8	0x508C      	MOVF        LATD, 0 
0x01AA	0x0A01      	XORLW       1
0x01AC	0xE102      	BNZ         L_main13
;ES2.c,73 :: 		up = 1;
0x01AE	0x0E01      	MOVLW       1
0x01B0	0x6E1D      	MOVWF       main_up_L0 
L_main13:
L_main12:
;ES2.c,74 :: 		if (up)
0x01B2	0x521D      	MOVF        main_up_L0, 1 
0x01B4	0xE007      	BZ          L_main14
;ES2.c,75 :: 		LATD = LATD << 1;
0x01B6	0xF000CF8C  	MOVFF       LATD, R0
0x01BA	0x3600      	RLCF        R0, 1 
0x01BC	0x9000      	BCF         R0, 0 
0x01BE	0xFF8CC000  	MOVFF       R0, LATD
0x01C2	0xD006      	BRA         L_main15
L_main14:
;ES2.c,77 :: 		LATD = LATD >> 1;
0x01C4	0xF000CF8C  	MOVFF       LATD, R0
0x01C8	0x3200      	RRCF        R0, 1 
0x01CA	0x9E00      	BCF         R0, 7 
0x01CC	0xFF8CC000  	MOVFF       R0, LATD
L_main15:
;ES2.c,78 :: 		}
L_main10:
;ES2.c,80 :: 		}
0x01D0	0xD7DE      	BRA         L_main8
;ES2.c,81 :: 		}
L_end_main:
0x01D2	0xD7FF      	BRA         $+0
; end of _main
Symbol List:
//** Routines locations **
//ADDRESS    SIZE    PROCEDURE
//----------------------------------------------
0x0008     [172]    _interrupt
0x00B4     [150]    _timer_add
0x014A      [16]    ___CC2DW
0x015A     [122]    _main
//** Variables locations ** 
//ADDRESS    SIZE    VARIABLE
//----------------------------------------------
0x0000       [1]    R0
0x0001       [1]    R1
0x0002       [1]    R2
0x0003       [1]    R3
0x0004       [1]    R4
0x0005       [1]    R5
0x0006       [1]    R6
0x0007       [1]    R7
0x0008       [1]    R8
0x0009       [1]    R9
0x000A       [1]    R10
0x000B       [1]    R11
0x000C       [1]    R12
0x000D       [1]    R13
0x000E       [1]    R14
0x000F       [1]    R15
0x0010       [1]    R16
0x0011       [1]    R17
0x0012       [1]    R18
0x0013       [1]    R19
0x0014       [1]    R20
0x0017       [2]    _delay
0x0019       [2]    _timer_time_dec
0x001B       [2]    _timer_time_int
0x001D       [1]    main_up_L0
0x001E       [2]    ?FLOC___interruptT4
0x0020       [2]    ?FLOC___interruptT8
0x0022       [2]    FARG_timer_add_timer_int
0x0024       [2]    FARG_timer_add_timer_dec
0x0F39       [1]    ANSELB
0x0F62       [1]    IOCB
0x0F81       [1]    PORTB
0x0F8C       [1]    LATD
0x0F93       [1]    TRISB
0x0F95       [1]    TRISD
0x0FD5       [1]    T0CON
0x0FD8       [1]    STATUS
0x0FD9       [1]    FSR2L
0x0FDA       [1]    FSR2H
0x0FDE       [1]    POSTINC2
0x0FE0       [1]    BSR
0x0FE1       [1]    FSR1L
0x0FE2       [1]    FSR1H
0x0FE4       [1]    PREINC1
0x0FE6       [1]    POSTINC1
0x0FE7       [1]    INDF1
0x0FE8       [1]    WREG
0x0FE9       [1]    FSR0L
0x0FEA       [1]    FSR0H
0x0FEE       [1]    POSTINC0
0x0FF2       [1]    INTCON
0x0FF3       [1]    PRODL
0x0FF4       [1]    PRODH
0x0FF5       [1]    TABLAT
0x0FF6       [1]    TBLPTRL
0x0FF7       [1]    TBLPTRH
0x0FF8       [1]    TBLPTRU
